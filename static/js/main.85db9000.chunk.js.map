{"version":3,"sources":["Header.js","Filter.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","name","className","href","Component","Filter","cities","bind","homeTypes","bedrooms","id","htmlFor","value","this","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAIqBA,E,YACnB,aAAgB,IAAD,8BACb,+CACKC,MAAQ,CACXC,KAAM,OAHK,E,sEAOb,OAAQ,gCACN,yBAAKC,UAAU,QAAf,uBAEA,yBAAKA,UAAU,cACf,uBAAGC,KAAK,4BAAR,cACA,uBAAGA,KAAK,4BAAR,YACA,uBAAGA,KAAK,4BAAR,UACA,uBAAGA,KAAK,2BAA2BD,UAAU,gBAA7C,mB,GAf8BE,a,OCFfC,E,YACnB,aAAgB,IAAD,8BACb,+CACKL,MAAQ,CACXC,KAAM,OAER,EAAKK,OAAO,EAAKA,OAAOC,KAAZ,gBACZ,EAAKC,UAAU,EAAKA,UAAUD,KAAf,gBACf,EAAKE,SAAS,EAAKA,SAASF,KAAd,gBAPD,E,iLAgDb,OAAQ,6BAASG,GAAG,UACxB,yBAAKR,UAAU,UACX,sCACA,2BAAOS,QAAQ,QAAf,QACA,4BAAQV,KAAK,OAAOC,UAAU,gBAC5B,4BAAQU,MAAM,OAAd,OACCC,KAAKP,UAER,2BAAOK,QAAQ,YAAf,aACA,4BAAQV,KAAK,WAAWC,UAAU,oBAC9B,4BAAQU,MAAM,OAAd,aACGC,KAAKL,aAEZ,2BAAOG,QAAQ,YAAf,YACA,4BAAQV,KAAK,WAAWC,UAAU,oBACjCW,KAAKJ,YAEV,yBAAKP,UAAU,iBACX,0BAAMA,UAAU,SAAhB,SACA,2BAAOY,KAAK,OAAOb,KAAK,YAAYC,UAAU,cAC9C,2BAAOY,KAAK,OAAOb,KAAK,YAAYC,UAAU,eAElD,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,SAAhB,eACA,2BAAOY,KAAK,OAAOb,KAAK,iBAAiBC,UAAU,oBACnD,2BAAOY,KAAK,OAAOb,KAAK,iBAAiBC,UAAU,qBAEvD,yBAAKA,UAAU,kBACf,0BAAMA,UAAU,SAAhB,UACI,2BAAOS,QAAQ,UACb,2CACE,2BAAOV,KAAK,WAAWW,MAAM,WAAWE,KAAK,cAEjD,2BAAOH,QAAQ,UACb,qCACE,2BAAOV,KAAK,MAAMW,MAAM,MAAME,KAAK,cAEvC,2BAAOH,QAAQ,UACb,2CACE,2BAAOV,KAAK,YAAYW,MAAM,YAAYE,KAAK,cAEnD,2BAAOH,QAAQ,UACf,+CACI,2BAAOV,KAAK,gBAAgBW,MAAM,gBAAgBE,KAAK,qB,GA5F3BV,aCcrBW,G,uLATX,OACE,yBAAKb,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALYE,cCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.85db9000.chunk.js","sourcesContent":["import React, { Component} from 'react'\r\n// import ReactDOM from 'react-dom'\r\n\r\n\r\nexport default class Header extends Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      name: 'Joe'\r\n    }\r\n  }\r\n  render () {\r\n    return (<header>\r\n      <div className=\"logo\"> Jone's Real Estate</div>\r\n\r\n      <nav className=\"menu-links\">\r\n      <a href=\"https://www.youtube.com/\">Create Ads</a>\r\n      <a href=\"https://www.youtube.com/\">About Us</a>\r\n      <a href=\"https://www.youtube.com/\">Log In</a>\r\n      <a href=\"https://www.youtube.com/\" className=\"register-btn\">Register </a>\r\n      </nav>\r\n      </header>)\r\n  }\r\n}\r\n","import React, { Component} from 'react'\r\n\r\nexport default class Filter extends Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      name: 'Joe'\r\n    }\r\n    this.cities=this.cities.bind(this)\r\n    this.homeTypes=this.homeTypes.bind(this)\r\n    this.bedrooms=this.bedrooms.bind(this)\r\n  }\r\n  // componentWillMount(){\r\n  //   this.props.populateAction()\r\n  // }\r\n  cities(){\r\n    // if (this.props.globalState.populateFormsData.cities != undefined){\r\n    //   var { cities }= this.props.globalState.populateFormsData\r\n    //\r\n    //   return cities.map((item) => {\r\n    //     return(\r\n    //       <option key={item} value={item}>{item}</option>\r\n    //     )\r\n    //   })\r\n    // }\r\n  }\r\n  homeTypes(){\r\n    // if (this.props.globalState.populateFormsData.homeTypes != undefined){\r\n    //   var { homeTypes }= this.props.globalState.populateFormsData\r\n    //   // console.log(homeTypes)\r\n    //   return homeTypes.map((item) => {\r\n    //     return(\r\n    //       <option key={item} value={item}>{item}</option>\r\n    //     )\r\n    //   })\r\n    // }\r\n\r\n  }\r\n  bedrooms(){\r\n    // if (this.props.globalState.populateFormsData.bedrooms != undefined){\r\n    //   var { bedrooms }= this.props.globalState.populateFormsData\r\n    //   // console.log(bedrooms)\r\n    //   return bedrooms.map((item) => {\r\n    //     return(\r\n    //       <option key={item} value={item}>{item}+ BR</option>\r\n    //     )\r\n    //   })\r\n    // }\r\n\r\n  }\r\n  render () {\r\n    return (<section id=\"filter\">\r\n<div className=\"inside\">\r\n    <h4>Filter</h4>\r\n    <label htmlFor=\"city\">City</label>\r\n    <select name=\"city\" className=\"filters city\">\r\n      <option value=\"All\">All</option>\r\n      {this.cities()}\r\n    </select>\r\n    <label htmlFor=\"HomeType\">Home Type</label>\r\n    <select name=\"homeType\" className=\"filters homeType\">\r\n        <option value=\"All\">All Homes</option>\r\n          {this.homeTypes()}\r\n    </select>\r\n    <label htmlFor=\"Bedrooms\">Bedrooms</label>\r\n    <select name=\"bedrooms\" className=\"filters bedrooms\" >\r\n    {this.bedrooms()}\r\n    </select>\r\n<div className=\"filters price\">\r\n    <span className=\"title\">Price</span>\r\n    <input type=\"text\" name=\"min_price\" className=\"min-price\"/>\r\n    <input type=\"text\" name=\"max_price\" className=\"max-price\"/>\r\n</div>\r\n<div className=\"filters floor-space\">\r\n    <span className=\"title\">Floor Space</span>\r\n    <input type=\"text\" name=\"min_floorspace\" className=\"min-floor-space\"/>\r\n    <input type=\"text\" name=\"max_floorspace\" className=\"max-floor-space\"/>\r\n</div>\r\n<div className=\"filters extras\">\r\n<span className=\"title\">Extras</span>\r\n    <label htmlFor=\"extras\">\r\n      <span>Elevators</span>\r\n        <input name=\"elevator\" value=\"elevator\" type=\"checkbox\"/>\r\n    </label>\r\n    <label htmlFor=\"extras\">\r\n      <span>Gym</span>\r\n        <input name=\"gym\" value=\"gym\" type=\"checkbox\"/>\r\n    </label>\r\n    <label htmlFor=\"extras\">\r\n      <span>Fireplace</span>\r\n        <input name=\"fireplace\" value=\"fireplace\" type=\"checkbox\"/>\r\n    </label>\r\n    <label htmlFor=\"extras\">\r\n    <span>Swimming Pool</span>\r\n        <input name=\"swimming_pool\" value=\"swimming_pool\" type=\"checkbox\"/>\r\n    </label>\r\n</div>\r\n</div>\r\n    </section>)\r\n  }\r\n}\r\n","import React, { Component} from 'react'\nimport Header from './Header.js'\nimport Filter from './Filter.js'\nimport './App.css';\n\nclass App extends Component{\n  render(){\n    return(\n      <div className=\"App\">\n      <Header/>\n      <Filter/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}